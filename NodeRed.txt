[{"id":"6086a774.acdf88","type":"websocket-listener","path":"/ws/sd14-hay-steamer/data","wholemsg":"false"},{"id":"92effabe.32c118","type":"switch","name":"Separate data; admin; logs","property":"eventType","rules":[{"t":"eq","v":"data"},{"t":"eq","v":"admin"},{"t":"eq","v":"logs"},{"t":"else"}],"checkall":"true","outputs":4,"x":508.4000244140625,"y":358.40000915527344,"z":"1e3d10be.2efbb7","wires":[["8babd6b4.f1a9e","9386c696.22333","89aed7a.24959a8"],["72ba8519.383724"],["9e45a955.042a88","e2e7ecb8.c8784"],["abb04f25.08901"]]},{"id":"46432ebf.4af678","type":"debug","name":"Unexpected message type","active":true,"console":"false","complete":"payload","x":1193.39990234375,"y":480.4000244140625,"z":"1e3d10be.2efbb7","wires":[]},{"id":"8177d2ae.5b22d","type":"debug","name":"","active":false,"console":"false","complete":"payload","x":888.4000244140625,"y":621.3999328613281,"z":"1e3d10be.2efbb7","wires":[]},{"id":"3c407af2.244d6e","type":"http in","name":"Web Monitor","url":"/sd14-hay-steamer/temp","method":"get","swaggerDoc":"","x":137.1999969482422,"y":1023.3999633789062,"z":"1e3d10be.2efbb7","wires":[["4f811831.a689e"]]},{"id":"4f811831.a689e","type":"template","name":"Build Web Page","field":"payload","format":"html","template":"<!DOCTYPE HTML>\n<html>\n    <head>\n    <title>Nicky's Hot Stuff</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <style>\n        body {text-align: center; font-size: 2em; font: arial;}\n        .led {\n            margin: 2px auto;\n            margin-top: 40px; \n            margin-bottom: 0px;\n            width: 40px;\n            height: 40px;\n            background-color: black;\n            border-radius: 50%;\n            box-shadow: #000 0 -1px 7px 1px, inset #600 0 -1px 9px, #F00 0 2px 12px;\n        }\n        .wrapper {\n            height: 100%;\n            display: table;\n            width: 100%;\n            text-align: center;\n        }\n        .header {\n    \t    display: table-row;\n      \t    height: 1px;\n            font-size: 40px;\n    \t}\n    \t.main {\n      \t    height: 100%;\n      \t    display: table;\n      \t    width: 100%;\n    \t}\n    \t.box {\n      \t    display: table-cell;\n    \t}\n    \t.sidebar {\n      \t    width: 25%;\n        }\n        .content {\n            width: 50%;\n        }\n    \t.footer {\n      \t    display: table-row;\n      \t    height:1px;\n    \t}\n        .gauge {\n            display: inline-block;\n        }\n    </style>\n    </head>\n    <body onload=\"wsConnect();\" onunload=\"wsDisconnect();\">\n        <div class=\"wrapper\">\n            <div class=\"header\">Nicky's Hot Stuff</div>\n            <div class=\"main\">\n                <div class=\"box sidebar\"><p style=\"text-decoration: underline;\">Status</p>\n                    <div class=\"led\" id=\"LED1\"></div>\n                    <p>Ready</p>\n                    <div class=\"led\" id=\"LED2\"></div>\n                    <p>Steaming</p>\n                    <div class=\"led\" id=\"LED3\"></div>\n                    <p>Completed</p>\n                </div>\n                <div class=\"box content\"><br/>\n                    <div class=\"gauge\" id=\"g1\"></div>\n                </div>\n                <div class=\"box sidebar\"><p style=\"text-decoration: underline;\">Controls</p>\n                    <button type=\"button\" style=\"width: 100px; margin-top: 20px\" onclick='doit(\"state1\");'><p style=\"font-size:24px\">Reset</p></button><br/>\n                    <button type=\"button\" style=\"width: 100px; margin-top: 60px\" onclick='doit(\"state2\");'><p style=\"font-size:24px\">Steam</p></button><br/> \n                    <audio id=\"audiotag1\" src=\"http://www.pacdv.com/sounds/domestic_sound_effects/alarm_clock_1.wav\" preload=\"auto\"></audio>\n                </div>\n            </div>\n            <div class=\"footer\" id=\"status\"><p style=\"font-size:24px\"><p>Please wait for one of the lights to come on.</p></div>\n        </div>\n        <script type=\"text/javascript\" src=\"https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1.1','packages':['gauge']}]}\"></script>\n        <script type=\"text/javascript\">\n            var g1data = google.visualization.arrayToDataTable([\n                ['Label', 'Value'],\n                ['℃', 0]\n            ]);\n            var m = new Array(\"-10\", \"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\");\n            var options = {\n                width: 600, height: 400,\n                greenFrom: 75, greenTo: 85,\n                redFrom:90, redTo:92,\n                minorTicks: 5,\n                majorTicks: m,\n                max: 110,\n                min: -10\n            };\n            var chart = new google.visualization.Gauge(document.getElementById('g1'));\n            var state = 0;\n            var states = new Array(\"Ready\", \"Steaming\", \"Completed\");\n            var LED1state = new Array(\"red\", \"black\", \"black\");\n            var LED2state = new Array(\"black\", \"yellow\", \"black\");\n            var LED3state = new Array(\"black\", \"black\", \"hsl(120, 100%, 75%)\");\n            var ws;\n            var wsUri = \"ws:\";\n            var loc = window.location;\n            console.log(loc);\n            chart.draw(g1data, options);\n            if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n            // This needs to point to the web socket in the Node-RED flow\n            wsUri += \"//\" + loc.host + loc.pathname.replace(\"sd14-hay-steamer/temp\",\"ws/sd14-hay-steamer/data\");\n\n            function wsConnect() {\n                console.log(\"connect\",wsUri);\n                ws = new WebSocket(wsUri);\n                ws.onmessage = function(msg) {\n                    var line = \"\"; \n                    var s = 0;\n                    var data = JSON.parse(msg.data);\n                    console.log(data);\n                    g1data = google.visualization.arrayToDataTable([\n                        ['Label', 'Value'],\n                        ['℃', Math.round(data.temp)]\n                    ]);\n                    chart.draw(g1data, options);\n                    state = parseInt(data.state);\n                    s = state - 1;\n                    line = data.date + \" \" + states[s];\n                    document.getElementById('status').innerHTML = '<p>' + line + '</p>';\n                    document.getElementById('LED1').style.backgroundColor = LED1state[s];\n                    document.getElementById('LED2').style.backgroundColor = LED2state[s];\n                    document.getElementById('LED3').style.backgroundColor = LED3state[s];\n                    if (state == 3) {       // meaning it is Completed\n                        document.getElementById(\"audiotag1\").play();\n                    }\n                }\n                ws.onopen = function() {\n                    // update the status div with the connection status\n                    if (state == 0) {\n                        document.getElementById('status').innerHTML = '<p>Please wait for one of the lights to come on.</p>'\n                    } else {\n                        document.getElementById('status').innerHTML = '<p>connected</p>';\n                    }\n                    //ws.send(\"Open for data\");\n                    console.log(\"connected onopen\");\n                }\n                ws.onclose = function() {\n                    // update the status div with the connection status\n                    document.getElementById('status').innerHTML = '<p>not connected</p>';\n                    // in case of lost connection tries to reconnect every 3 secs\n                    setTimeout(wsConnect,3000);\n                }\n            }\n            \n            function wsDisconnect() {\n                console.log(\"disconnect\",wsUri)\n                ws.close();\n            }\n    \n            function doit(m) {\n                if (ws) { ws.send(m); \n               // update the buttonmsg div with an informative message\n                document.getElementById('status').innerHTML = '<p>Sending message ' + m + '</p>';\n                }\n            }\n        </script>\n    </body>\n</html>\n","x":527.4000244140625,"y":1025.3999328613281,"z":"1e3d10be.2efbb7","wires":[["1cb52ea0.d74d31"]]},{"id":"14547921.ffa5b7","type":"inject","name":"Reboot","topic":"","payload":"reboot","payloadType":"string","repeat":"","crontab":"","once":false,"x":328.4000244140625,"y":932.3999481201172,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88"]]},{"id":"fc37be73.a29738","type":"inject","name":"Shutdown","topic":"","payload":"shutdown","payloadType":"string","repeat":"","crontab":"","once":false,"x":321.4000244140625,"y":966.3999481201172,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88"]]},{"id":"40665814.162b88","type":"switch","name":"","property":"payload","rules":[{"t":"eq","v":"reboot"},{"t":"eq","v":"shutdown"},{"t":"eq","v":"state1"},{"t":"eq","v":"state2"},{"t":"eq","v":"state3"},{"t":"eq","v":"state10"},{"t":"else"}],"checkall":"true","outputs":7,"x":500.4000244140625,"y":768.3999328613281,"z":"1e3d10be.2efbb7","wires":[["bbbedda2.d44ae"],["9507fc12.9c2c3"],["17c7204a.8f5d7"],["b640a960.92bbb"],["5cb397e3.36254"],["e1cf7665.5c4d7"],["2605e1cd.958976"]]},{"id":"feef08c8.ad2cd","type":"ibmiot out","authentication":"boundService","apiKey":"","outputType":"cmd","deviceId":"000b8186046f","deviceType":"pjb-rpi","eventCommandType":"dkE20s*r19s!u","format":"json","data":"'will be replaced'","name":"Reboot command via IOTF","service":"registered","x":931.4000244140625,"y":665.3999481201172,"z":"1e3d10be.2efbb7","wires":[]},{"id":"8c820f9b.290f98","type":"ibmiot out","authentication":"boundService","apiKey":"","outputType":"cmd","deviceId":"000b8186046f","deviceType":"pjb-rpi","eventCommandType":"gsYi21lu-!e8","format":"json","data":"'will be replaced'","name":"Shutdown command via IOTF","service":"registered","x":939.4000244140625,"y":699.3999481201172,"z":"1e3d10be.2efbb7","wires":[]},{"id":"bbbedda2.d44ae","type":"template","name":"Reboot","field":"payload","format":"handlebars","template":"{\"message\":\"Hello World\"}","x":684.4000244140625,"y":665.3999633789062,"z":"1e3d10be.2efbb7","wires":[["feef08c8.ad2cd"]]},{"id":"2e149f04.d51b08","type":"debug","name":"","active":true,"console":"false","complete":"false","x":895.4000244140625,"y":869.3999481201172,"z":"1e3d10be.2efbb7","wires":[]},{"id":"2605e1cd.958976","type":"template","name":"Unsupported","field":"payload","format":"handlebars","template":"Unsupported command: {{payload}} !","x":706.4000244140625,"y":870.4000091552734,"z":"1e3d10be.2efbb7","wires":[["2e149f04.d51b08"]]},{"id":"9507fc12.9c2c3","type":"template","name":"Shutdown","field":"payload","format":"handlebars","template":"{\"message\":\"Hello World\"}","x":693.4000244140625,"y":699.3999633789062,"z":"1e3d10be.2efbb7","wires":[["8c820f9b.290f98"]]},{"id":"56998e55.f72b8","type":"inject","name":"Reset","topic":"","payload":"state1","payloadType":"string","repeat":"","crontab":"","once":false,"x":119.40000915527344,"y":751.3999481201172,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88"]]},{"id":"17c7204a.8f5d7","type":"template","name":"Reset","field":"payload","format":"handlebars","template":"{\"state\":1}","x":684.4000244140625,"y":734.3999633789062,"z":"1e3d10be.2efbb7","wires":[["3c5dbb7b.1e1614"]]},{"id":"b640a960.92bbb","type":"template","name":"Steam","field":"payload","format":"handlebars","template":"{\"state\":2}","x":686.4000244140625,"y":768.3999633789062,"z":"1e3d10be.2efbb7","wires":[["3c5dbb7b.1e1614"]]},{"id":"5cb397e3.36254","type":"template","name":"Complete","field":"payload","format":"handlebars","template":"{\"state\":3}","x":696.4000244140625,"y":802.3999481201172,"z":"1e3d10be.2efbb7","wires":[["3c5dbb7b.1e1614"]]},{"id":"3c5dbb7b.1e1614","type":"ibmiot out","authentication":"boundService","apiKey":"","outputType":"cmd","deviceId":"000b8186046f","deviceType":"pjb-rpi","eventCommandType":"setState","format":"json","data":"'will be replaced'","name":"setState command via IOTF","service":"registered","x":936.4000244140625,"y":767.3999481201172,"z":"1e3d10be.2efbb7","wires":[]},{"id":"c5ef41d9.1f1fe","type":"inject","name":"Steam","topic":"","payload":"state2","payloadType":"string","repeat":"","crontab":"","once":false,"x":118.40000915527344,"y":799.3999481201172,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88"]]},{"id":"40c2211b.46bbe8","type":"inject","name":"Complete","topic":"","payload":"state3","payloadType":"string","repeat":"","crontab":"","once":false,"x":121.40000915527344,"y":849.3999481201172,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88"]]},{"id":"174537e0.77c58","type":"websocket in","name":"","server":"6086a774.acdf88","client":"","x":170.40000915527344,"y":623.39990234375,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88","8177d2ae.5b22d"]]},{"id":"8babd6b4.f1a9e","type":"websocket out","name":"","server":"6086a774.acdf88","client":"","x":948.4000244140625,"y":295.40000915527344,"z":"1e3d10be.2efbb7","wires":[]},{"id":"887d8bdd.201ae","type":"inject","name":"StopProgram","topic":"","payload":"state10","payloadType":"string","repeat":"","crontab":"","once":false,"x":313.4000244140625,"y":897.3999481201172,"z":"1e3d10be.2efbb7","wires":[["40665814.162b88"]]},{"id":"e1cf7665.5c4d7","type":"template","name":"StopProgram","field":"payload","format":"handlebars","template":"{\"state\":10}","x":707.4000244140625,"y":836.3999481201172,"z":"1e3d10be.2efbb7","wires":[["3c5dbb7b.1e1614"]]},{"id":"f091dafa.8d5d3","type":"comment","name":"User Controls","info":"","x":112.19999694824219,"y":706.1999359130859,"z":"1e3d10be.2efbb7","wires":[]},{"id":"fce3c5ca.efd2f","type":"comment","name":"Admin Controls","info":"","x":308.20001220703125,"y":859.1999359130859,"z":"1e3d10be.2efbb7","wires":[]},{"id":"7503c34c.8afc3c","type":"ibmiot in","authentication":"boundService","apiKey":"","inputType":"evt","deviceId":"000b8186046f","applicationId":"","deviceType":"pjb-rpi","eventType":"","commandType":"","format":"json","name":"SD14-Hay-Steamer-V2","service":"registered","allDevices":"","allApplications":"","allDeviceTypes":"","allEvents":true,"allCommands":"","allFormats":"","x":151,"y":358.00001525878906,"z":"1e3d10be.2efbb7","wires":[["92effabe.32c118"]]},{"id":"9386c696.22333","type":"debug","name":"Show Data messages","active":false,"console":"false","complete":"payload","x":917.2000122070312,"y":257.20001220703125,"z":"1e3d10be.2efbb7","wires":[]},{"id":"9e45a955.042a88","type":"cloudant out","service":"pjb-rpi-sd14-cloudantNoSQLDB","cloudant":"","name":"Store Log message","database":"logs","payonly":true,"operation":"insert","x":916.2000122070312,"y":438.20001220703125,"z":"1e3d10be.2efbb7","wires":[]},{"id":"72ba8519.383724","type":"debug","name":"Show Admin messages","active":true,"console":"false","complete":"payload","x":923.2000122070312,"y":346.20001220703125,"z":"1e3d10be.2efbb7","wires":[]},{"id":"abb04f25.08901","type":"template","name":"Unexpected message","field":"payload","format":"handlebars","template":"Unexpected message: {{payload}} !","x":924.2000122070312,"y":482.20001220703125,"z":"1e3d10be.2efbb7","wires":[["46432ebf.4af678"]]},{"id":"e2e7ecb8.c8784","type":"debug","name":"Show Log messages","active":true,"console":"false","complete":"payload","x":920.2000122070312,"y":395.20001220703125,"z":"1e3d10be.2efbb7","wires":[]},{"id":"97e5afa2.8cdb18","type":"http request","name":"ThingSpeak","method":"POST","ret":"txt","url":"https://api.thingspeak.com/update.json?api_key=Y5GJMXA8DG5GRESM","x":1194.199951171875,"y":207.1999969482422,"z":"1e3d10be.2efbb7","wires":[["ad7979c.d7a7208"]]},{"id":"6b1eb3ae.c9b404","type":"debug","name":"","active":false,"console":"false","complete":"payload","x":1195.199951171875,"y":255.20001220703125,"z":"1e3d10be.2efbb7","wires":[]},{"id":"ad7979c.d7a7208","type":"debug","name":"","active":false,"console":"false","complete":"payload","x":1367.199951171875,"y":206.1999969482422,"z":"1e3d10be.2efbb7","wires":[]},{"id":"89aed7a.24959a8","type":"function","name":"Reformat data for ThingSpeak","func":"var line = \"\";\nvar date2 = msg.payload.date;\ndate2 = date2.replace(\"/\",\"-\");\ndate2 = date2.replace(\"/\",\"-\");\ndate2 = date2.replace(\" \",\"%20\");\nline = \"field1=\" + date2;\nline = line + \";field2=\" + msg.payload.temp;\nline = line + \"; field3=\" + msg.payload.state;\nline = line + \"; field4=\" + msg.payload.cpupct;\nline = line + \"; field5=\" + msg.payload.cpumem;\nline = line + \"; field6=\" + msg.payload.cputemp;\nmsg.payload = line;\nreturn msg;","outputs":1,"noerr":0,"x":946.2000122070312,"y":208.1999969482422,"z":"1e3d10be.2efbb7","wires":[["6b1eb3ae.c9b404","97e5afa2.8cdb18"]]},{"id":"1efd7979.a0100f","type":"http response","name":"","x":864.0000305175781,"y":1102,"z":"1e3d10be.2efbb7","wires":[]},{"id":"98b61716.412098","type":"http in","name":"ThingSpeak Monitor","url":"/sd14-hay-steamer/tsmon","method":"get","swaggerDoc":"","x":133,"y":1100.000015258789,"z":"1e3d10be.2efbb7","wires":[["a90f165b.3f9ba8"]]},{"id":"a90f165b.3f9ba8","type":"template","name":"Build Web Page","field":"payload","format":"html","template":"<!DOCTYPE HTML>\n<html>\n    <head>\n    <title>Nicky's Hot Stuff</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <style>\n        body {\n            text-align: center; \n            font-size: 2em; \n            font: arial;\n        }\n        .wrapper {\n            height: 100%;\n            display: table;\n            width: 100%;\n        }\n        .header {\n      \t    height: 1px;\n      \t    width: 100%;\n            font-size: 40px;\n    \t}\n    \t.main {\n      \t    height: 100%;\n      \t    display: table;\n      \t    width: 100%;\n    \t}\n    \t.box {\n      \t    display: table-cell;\n    \t}\n    \t.sidebar {\n      \t    width: 20%;\n        }\n        .content {\n            width: 40%;\n        }\n    \t.footer {\n      \t    height:1px;\n      \t    width: 100%;\n      \t    font-size: 24px;\n    \t}\n        .gauge {\n            display: inline-block;\n            height: 400px;\n            width: 400px;\n            margin: 0;\n            padding: 0;\n        }\n        .chart {\n            display: inline-block;\n            height: 300px;\n            width: 80%;\n            margin-top: 0;\n            border: 1px solid #cccccc;\n        }\n        .buttonlight {\n            height: 20%;\n            width: 60%;\n            margin: 10%;\n        }\n        .button3d{\n\t        position:relative;\n\t        height: 80px;\n            width: 200px;\n\t        display:block;\n  \t        text-decoration:none;  \n\t        margin:0;\n\t        border-radius:5px;\n\t        border:solid 1px #D94E3B;\n\t        text-align:center;\n\t        padding:20px 30px;\n\t        -webkit-transition: all 0.2s;\n\t        -moz-transition: all 0.2s;\n\t        transition: all 0.2s;\n        \t-webkit-box-shadow: 0px 9px 0px #84261a;\n            -moz-box-shadow: 0px 9px 0px #84261a;\n            box-shadow: 0px 9px 0px #84261a;\n            text-shadow: 0px  -1px 0px rgba(0,0,0,.5);\n            font-size: 24px;\n            vertical-align: middle;\n        }\n        .button3d:active{\n            -webkit-box-shadow: 0px 2px 0px #84261a;\n            -moz-box-shadow: 0px 2px 0px #84261a;\n            box-shadow: 0px 2px 0px #84261a;\n            position:relative;\n            top:7px;\n        }\n        .button3d:hover {\n            color: yellow;\n        }\n    </style>\n    </head>\n    <body onload=\"initPage();\">\n        <div class=\"wrapper\">\n            <div class=\"main\">\n               <div class=\"box sidebar\"><br/>\n                    <button id=\"LED1\" type=\"button\" class=\"button3d\" onclick='doit(\"state1\");'>Ready</button><br/>\n                    <button id=\"LED2\" type=\"button\" class=\"button3d\" onclick='doit(\"state2\");'>Steaming</button><br/> \n                    <button id=\"LED3\" type=\"button\" class=\"button3d\" onclick='doit(\"state3\");'>Completed</button><br/> \n                    <audio id=\"audiotag1\" src=\"http://www.wavlist.com/soundfx/020/clock-alarm3.wav\" preload=\"auto\"></audio>\n                </div>\n                <div class=\"box content\">\n                    <p class=\"header\">Nicky's Hot Stuff</p>\n                    <div class=\"gauge\" id=\"g1\"></div>\n                    <p class=\"footer\" id=\"status\">Please wait; connecting...</p>\n                </div>\n                <div class=\"box content\"><br/>\n                    <iframe class=\"chart\" src=\"https://thingspeak.com/channels/68030/charts/2?api_key=G9E98ZR9DJV59O4L&amp;yaxismax=100&amp;yaxismin=0&amp;results=60&amp;dynamic=true&amp;yaxis=Degrees%20Celsius&amp;title=Hay%20Temperature\"></iframe>\n                </div>\n            </div>\n        </div>\n        <script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js'></script>\n        <script type='text/javascript' src='https://www.google.com/jsapi'></script>\n        <script type=\"text/javascript\" src=\"//thingspeak.com/highcharts-3.0.8.js\"></script>\n        <script type=\"text/javascript\" src=\"//thingspeak.com/exporting.js\"></script>\n        <script type='text/javascript'>\n            var channel_id = 68030;                             // set your channel id here\n            var api_key = 'G9E98ZR9DJV59O4L';                   // set your channel's read api key here if necessary\n            var max_gauge_value = 110;\n            var gauge_name = '\\xB0C';\n            var chart, charts, data;                            // global variables\n            var state = 0;\n            var states = new Array(\"Ready\", \"Steaming\", \"Completed\");\n            var css_up = \"box-shadow: 0px 9px 0px #84261a;\";\n            var css_down = \"box-shadow: 0px 2px 0px #84261a; position: relative; top: 7px;\";\n            var ws;\n            var wsUri = \"ws:\";\n            var loc = window.location;\n\n            if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n            // This needs to point to the web socket in the Node-RED flow\n            wsUri += \"//\" + loc.host + loc.pathname.replace(\"sd14-hay-steamer/tsmon\",\"ws/sd14-hay-steamer/data\");\n\n            google.load('visualization', '1', {packages:['gauge']});            // load the google gauge visualization\n            google.setOnLoadCallback(initChart);\n            function displayData(point) {                       // display the data\n                data.setValue(0, 0, gauge_name);\n                data.setValue(0, 1, point);\n                chart.draw(data, options);\n            }\n            function loadData() {                               // load the data\n                var temp, state;                                          // variable for the data point\n                // get the data from thingspeak\n                $.getJSON('https://api.thingspeak.com/channels/' + channel_id + '/feed/last.json?api_key=' + api_key, function(data) {\n                    sample_time = data.field1;                  // get the timestamp of the latest reading\n                    temp = data.field2;                            // get the data point\n                    if (temp) {                                    // if there is a data point display it\n                        temp = Math.round(temp);\n                        displayData(temp);\n                    }\n                    state = data.field3;                           // discover whether we are \"Ready\", \"Steaming\" or \"Completed\"\n                    if (state) {\n                        s = state - 1;\n                        statusmsg(states[s]);\n                        switch(state) {\n                            case \"1\":\n                                document.getElementById('LED1').style.cssText = css_up;                 // pop the button back up again\n                                document.getElementById('LED1').style.backgroundColor = \"red\";\n                                document.getElementById('LED2').style.backgroundColor = \"lightgray\";\n                                document.getElementById('LED3').style.backgroundColor = \"lightgray\";\n                                break;\n                            case \"2\":\n                                document.getElementById('LED2').style.cssText = css_up;                 // pop the button back up again\n                                document.getElementById('LED1').style.backgroundColor = \"lightgray\";\n                                document.getElementById('LED2').style.backgroundColor = \"yellow\";\n                                document.getElementById('LED3').style.backgroundColor = \"lightgray\";\n                                break;\n                            case \"3\":\n                                document.getElementById('LED3').style.cssText = css_up;                 // pop the button back up again\n                                document.getElementById('LED1').style.backgroundColor = \"lightgray\";\n                                document.getElementById('LED2').style.backgroundColor = \"lightgray\";\n                                document.getElementById('LED3').style.backgroundColor = \"hsl(120, 100%, 75%)\";\n                                document.getElementById(\"audiotag1\").play();\n                                break;\n                            default:\n                        }\n                    }\n                });\n            }\n            function initChart() {                              // initialize the chart\n                data = new google.visualization.DataTable();\n                data.addColumn('string', 'Label');\n                data.addColumn('number', 'Value');\n                data.addRows(1);\n                chart = new google.visualization.Gauge(document.getElementById('g1'));\n                var m = new Array(\"-10\", \"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\");\n                options = {redFrom: 90, redTo: 92, greenFrom: 75, greenTo: 85, minorTicks: 5, majorTicks: m, max: 110, min: -10};\n                loadData();\n                setInterval('loadData()', 5000);                // load new data every 5 seconds\n            }\n            function doit(m) {\n                if (ws) { ws.send(m); \n               // update the buttonmsg div with an informative message\n                statusmsg(\"Sending message \" + m);\n                    switch(m) {\n                        case(\"state1\"):\n                            document.getElementById('LED1').style.cssText = css_down;                 // keep the button down until state change is acknowledged\n                            break;\n                        case(\"state2\"):\n                            document.getElementById('LED2').style.cssText = css_down;                 // keep the button down until state change is acknowledged\n                            break;\n                        case(\"state3\"):\n                            document.getElementById('LED3').style.cssText = css_down;                 // keep the button down until state change is acknowledged\n                            break;\n                        default:\n                    }\n                }\n            }\n            function wsConnect() {\n                ws = new WebSocket(wsUri);\n                ws.onmessage = function(msg) {\n                    var line = \"\"; \n                    var s = 0;\n                    var data = JSON.parse(msg.data);\n                }\n                ws.onopen = function() {\n                    if (state == 0) {\n                        statusmsg(\"Please wait; connecting...\");\n                    } else {\n                        statusmsg(\"Connected\");\n                    }\n                    console.log(\"connected onopen\");\n                }\n                ws.onclose = function() {\n                    statusmsg(\"Not connected\");\n                    // in case of lost connection tries to reconnect every 3 secs\n                    setTimeout(wsConnect,3000);\n                }\n            }\n            function initPage() {\n                wsConnect();\n            }\n            function statusmsg(m) {\n                document.getElementById('status').innerHTML = '<p>' + sample_time + \" \" + m + '</p>';\n            }\n        </script>\n    </body>\n</html>\n","x":523.2000274658203,"y":1101.999984741211,"z":"1e3d10be.2efbb7","wires":[["1efd7979.a0100f"]]},{"id":"1cb52ea0.d74d31","type":"http response","name":"","x":854.1166687011719,"y":1023.1166687011719,"z":"1e3d10be.2efbb7","wires":[]}]